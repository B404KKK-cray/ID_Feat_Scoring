DECLARE date1 STRING DEFAULT '2025-09-30';

-- drop table joey-bi-ss-risk-fraud-project.credit.feat_eng_1_2025_09_30;
create table joey-bi-ss-risk-fraud-project.credit.feat_eng_1_2025_09_30 as
With limit_base as (
  select 
      t24_customer_id,
      limit_id,
      deviation_level,
      limit_amount,
      request_ip_address,
      request_location,
      request_gps,
      device_id,
      substr(string(created_at),1,10) as create_date,
      status,
      extract(hour from created_at) as apply_hr,
      customer_info_id,
      limit_customer_info_id
  from joey-bi-prod-project.staging.stg_loan__personal_loan_sys_limit_application
  where STRING(mis_date)=date1
      and status in ('agreementSigned')
),
disb_base as (
  select arrangement_id,
          limit_id,
          limit_loan_amount as disb_amt,
          tenor,
          product_code,
          substr(cast(created_at as STRING),0,10) as disb_dt,
          concat(substr(string(created_at),1,4),'-',substr(string(created_at),6,2)) as disb_mth,
          extract(hour from created_at) as disb_hr
  from joey-bi-prod-project.staging.stg_collection__limit_loan disb
  where STRING(disb.mis_date)= date1
),
flagging_grp as (
  select t24_customer_id,
      case
            when d.flagging = '3. NTB'
              and d.final_attribution_gtm = 'Offline Sales - BSQ' then '3. NTB - Offline'
            when d.flagging = '3. NTB'
              then '4. NTB - Online'
            when d.flagging is null then "2. Non-Funded"
            else d.flagging end as flagging 
  from joey-bi-prod-project.saqu.ft_saku_kredit_portfolio_history d
),
onboarding_req as (
  select t24_customer_id,
          province,
          REGEXP_EXTRACT(email, r'@(.+)') AS email_domain,
          channel,
          gender,
          customer_range_age,
          phone_number,
          case
            when substr(phone_number,1,5) in ('62812','62821','62822',
                              '62823','62813','62852','62851','62811',
                              '62853') then '1. Telkomsel'
            when substr(phone_number,1,5) in ('62856','62857','62815',
                              '62858','62814','62855','62816') then '2. Indosat'
            when substr(phone_number,1,5) in ('62817','62818','62877',
                              '62819','62878','62859') then '3. XL'
            when substr(phone_number,1,5) in ('62881','62882','62888',
                              '62889','62887') then '4. Smartfren'
            when substr(phone_number,1,5) in ('62838','62831') then '5. Axis'
            when substr(phone_number,1,5) in ('62899','62898','62897',
                              '62896','62895') then '6. Tri'
            else '9. Others' 
            end as No_Provider,
            purpose,
            referral_code,
            astra_group_company,
            job_position,
            bio_level,
            name_level,
            device_unique_id,
            monthly_income_label,
            ektp_date_issuing,
          
  from joey-bi-prod-project.staging.stg_onboarding__onboarding_request__hive_merge
  where STRING(mis_date)=date1
),
cred_summary as (
  select application_id,
          credit_bureau_score as clik_bur_score,
          credit_bureau_risk_level as clik_risk_lvl,
          bureau_type as clik_bureau_info,
          income_verified as izi_income_verification,
          home_address_verified as aai_home_verification,
          office_address_verified as aai_office_verification,
          alternative_advance_ai_score as bps_score,
          final_risk_level,
          final_income,
          monthly_debt_repayment,
          loan_amount,
          loan_tenor,
          interest_rate,
          installment,
          final_dbr,
          
  from joey-bi-prod-project.staging.stg_loan__loan_credit_summary
  where STRING(mis_date)=date1
),

sake_cust_info as (
select id,
      nik,
      date_of_birth,
      education_level,
      email,
      mother_maiden_name,
      place_of_birth,
      marital_status,
      ktp_address,
      
      emergency_contact,
      emergency_contact_relationship,
      emergency_contact_number
from joey-bi-prod-project.staging.stg_loan__sake_limit_customer_info
  where STRING(mis_date)=date1
),

sake_resident_info as (
select id,
      limit_customer_info_id,
      residential_status,
      urban_village,
      province,
      city,
      postal_code,
      length_of_stay,
      residential_type,
      residential_address,
      district,
      residential_neighborhood

from joey-bi-prod-project.staging.stg_loan__sake_limit_residential_info
  where STRING(mis_date)=date1
),

sake_work_info as (
select id,
      limit_customer_info_id,
      declared_income,
      industry,
      office_address,
      office_phone,
      company_name,
      length_of_work,
      job_position,
      occupation_status,
      occupation_detail,
      occupation,
      source_of_funds,

from joey-bi-prod-project.staging.stg_loan__sake_limit_work_info
  where STRING(mis_date)=date1
),

aai_record as (
  --this table contain duplicate of phone number...
  select id,
        phone_number,
        status,
        score,
        verify_type,
        vendor_type,
  from staging.stg_loan__sake_advance_ai_record
    where STRING(mis_date)=date1

),

bps_record as (
  select id,
        score,
        result -- per features
  from staging.stg_loan__sake_bps_score_record
  where STRING(mis_date)=date1

),

izi_record as (
  select id,
        salary,
        income,
  from staging.stg_loan__sake_izi_salary
  where STRING(mis_date)=date1

),
raw_clik_data as (
  select customer_id,
        count_num,
        provider_type,
        provider_type_desc,
        provider_code,
        provider_code_desc,
        contract_phase,
        contract_phase_desc,
        contract_type,
        contract_type_desc,
        start_date,
        due_date,
        past_due_status_code,
        past_due_status_desc,
        code_charater_credit,
        code_charater_credit_desc,
        usage_type_code,
        usage_type_code_desc,
        interest_rate,
        init_credit_lim,
        credit_limit,
        debit_bal,
        dpd,
        freq_restruct,
        max_ovd_amount,
        max_ovd_num,
        max_ovd_date,
        max_dpd,
        worst_status,
        worst_status_desc,
        worst_status_date,
        guarantors_num,
        collaterals_num,
        tot_collateral_value,
        
  from joey-bi-prod-project.staging.stg_credit_report__clik_credit_granted__hive_merge
  where STRING(mis_date)=date1
),
clik_data_con as (
  select customer_id,
        max(count_num) as max_count_num
  from raw_clik_data
  group by customer_id
),
clik_feature as (
  select customer_id,
          count_num,

          min (date(start_date)) as first_loan_date, -- for bur MOB
          max (date(start_date)) as latest_loan_date, -- for bur MOB
          
          max(
            case
              when TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              else TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as max_tenor,
          min(
            case
              when TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              else TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as min_tenor,
          avg(
            case
              when TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              else TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as avg_tenor,

          max (case
            when contract_phase = 'AC' and
                provider_code = "252620" then 1
            else 0 end) as Have_CF_loan, -- Commerce Finance
          max (case
            when contract_phase = 'AC' and
                provider_code = "535" then 1
            else 0 end) as Have_SB_loan, -- Seabank
          max (case
            when contract_phase = 'AC' and
                provider_code = "490" then 1
            else 0 end) as Have_BNC_loan, -- Bank Neo
          max (case
            when contract_phase = 'AC' and
                provider_code = "820129" then 1
            else 0 end) as Have_APL_loan, -- Ada Pundi
          max (case
            when contract_phase = 'AC' and
                provider_code = "009" then 1
            else 0 end) as Have_BNI_loan, -- Bank Negara Indo
          max (case
            when contract_phase = 'AC' and
                provider_code = "542" then 1
            else 0 end) as Have_Jago_loan, -- Bank Jago
          max (case
            when contract_phase = 'AC' and
                provider_code = "022" then 1
            else 0 end) as Have_CIMB_loan, -- Bank CIMB
          max (case
            when contract_phase = 'AC' and
                provider_code = "562" then 1
            else 0 end) as Have_Super_loan, -- SuperBank
          max (case
            when contract_phase = 'AC' and
                provider_code = "002" then 1
            else 0 end) as Have_BRI_loan, -- Bank Rakyat Indo
          max (case
            when contract_phase = 'AC' and
                provider_code = "501" then 1
            else 0 end) as Have_Blu_loan, -- Blu / Royal
          max (case
            when contract_phase = 'AC' and
                provider_code = "013" then 1
            else 0 end) as Have_Permata_loan, -- Bank Permata
          max (case
            when contract_phase = 'AC' and
                provider_code = "252906" then 1
            else 0 end) as Have_Kredivo_loan, -- Kredivo
          max (case
            when contract_phase = 'AC' and
                provider_code = "567" then 1
            else 0 end) as Have_Allo_loan, -- Bank Allo
          max (case
            when contract_phase = 'AC' and
                provider_code = "014" then 1
            else 0 end) as Have_BCA_loan, -- Bank BCA
          max (case
            when contract_phase = 'AC' and
                provider_code = "459" then 1
            else 0 end) as Have_Krom_loan, -- Krom Bank
          max (case
            when contract_phase = 'AC' and
                provider_code = "252200" then 1
            else 0 end) as Have_Indodana_loan, -- Indodana
          max (case
            when contract_phase = 'AC' and
                provider_code = "046" then 1
            else 0 end) as Have_DBS_loan, -- Bank DBS
          max (case
            when contract_phase = 'AC' and
                provider_code = "251670" then 1
            else 0 end) as Have_Akulaku_loan, -- Akulaku
          max (case
            when contract_phase = 'AC' and
                provider_code = "213" then 1
            else 0 end) as Have_SMBC_loan, -- Bank SMBC
          max (case
            when contract_phase = 'AC' and
                provider_code = "050" then 1
            else 0 end) as Have_SCB_loan, -- Bank Standard Chartered
          max (case
            when contract_phase = 'AC' and
                provider_code = "252250" then 1
            else 0 end) as Have_Gofin_loan, -- Multifinance Anak Bangsa
          max (case
            when contract_phase = 'AC' and
                provider_code = "810154" then 1
            else 0 end) as Have_360Kredi_loan, -- 360 Kredi
          max (case
            when contract_phase = 'AC' and
                provider_code in ("009","014","008","002") then 1
            else 0 end) as Have_KBMI4, -- BRI, BCA, Mandiri, BNI
          
          max (case
            when contract_phase = 'AC' and
                provider_code in ("022","013","028","022","011","019",
                "011","013","028","517") then 1
            else 0 end) as Have_KBMI3, -- Permata, Cimb, OCBC, Danamon, Panin
          
          max (case
            when contract_phase = 'AC' and
                provider_code_desc like "%BPR%" then 1
            when contract_phase = 'AC' and
                provider_code_desc like "%BPD%" then 1
            else 0 end) as Have_BPR_BPD, -- BPR-BPD
          
          max (case
            when contract_phase = 'AC' and
                provider_code in ("252620","252906","252200","251670",
                      "252250","250340","252917","251890","810034","252909") then 1
            else 0 end) as Have_Fintech, -- CF, Kredivo, Indodana, Akulaku, Gopay, Honest, Traveloka, Atome, Finture, HCI
          max (case
            when contract_phase = 'AC' and
                provider_code in ("820129","810154","810058","810063") then 1
            else 0 end) as Have_P2P, -- APL, 360 Kredi, UangMe, EasyCash
          max (case
            when contract_phase = 'AC' and
                provider_code in ("1639") then 1
            else 0 end) as Have_Collectius, -- Collectius
          
          sum (case
            when contract_phase = 'AC' then 1
            else 0 end) as Count_loan, -- all active
          sum (case
            when contract_phase = 'AC' then credit_limit
            else 0 end) as Total_Limit, -- all active
          sum (case
            when contract_phase = 'AC' then debit_bal
            else 0 end) as Total_OS, -- all active
          max (case
            when contract_phase = 'AC' then credit_limit
            else 0 end) as Max_Limit, -- all active
          max (case
            when contract_phase = 'AC' then debit_bal
            else 0 end) as Max_OS, -- all active
          max (case
            when contract_phase = 'AC' then interest_rate
            else 0 end) as Max_int_rate, -- all active
          max(
            case
              when contract_phase = 'AC' and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC'
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as max_tenor_active,
          min(
            case
              when contract_phase = 'AC' and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC'
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as min_tenor_active,
          avg(
            case
              when contract_phase = 'AC' and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC'
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as avg_tenor_active,
          

          
          sum (case
            when contract_phase = 'AC'
              and usage_type_code = "1" then 1
            else 0 end) as Count_loan_WC, -- all active working capital
          sum (case
            when contract_phase = 'AC' 
              and usage_type_code = "1" then credit_limit
            else 0 end) as Total_Limit_WC, -- all active working capital
          sum (case
            when contract_phase = 'AC' 
              and usage_type_code = "1" then debit_bal
            else 0 end) as Total_OS_WC, -- all active working capital
          max (case
            when contract_phase = 'AC' 
              and usage_type_code = "1" then credit_limit
            else 0 end) as Max_Limit_WC, -- all active working capital
          max (case
            when contract_phase = 'AC' 
              and usage_type_code = "1" then debit_bal
            else 0 end) as Max_OS_WC, -- all active working capital
          max (case
            when contract_phase = 'AC' 
              and usage_type_code = "1" then interest_rate
            else 0 end) as Max_int_rate_WC, -- all active working capital
          max(
            case
              when contract_phase = 'AC' 
              and usage_type_code = "1" and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC' 
              and usage_type_code = "1"
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as max_tenor_active_WC,
          min(
            case
              when contract_phase = 'AC' 
              and usage_type_code = "1" and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC' 
              and usage_type_code = "1"
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as min_tenor_active_WC,
          avg(
            case
              when contract_phase = 'AC' 
              and usage_type_code = "1" and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC' 
              and usage_type_code = "1"
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as avg_tenor_active_WC,
          
          
          sum (case
            when contract_phase = 'AC'
              and usage_type_code = "2" then 1
            else 0 end) as Count_loan_Inv, -- all active investment
          sum (case
            when contract_phase = 'AC' 
              and usage_type_code = "2" then credit_limit
            else 0 end) as Total_Limit_Inv, -- all active investment
          sum (case
            when contract_phase = 'AC' 
              and usage_type_code = "2" then debit_bal
            else 0 end) as Total_OS_Inv, -- all active investment
          max (case
            when contract_phase = 'AC' 
              and usage_type_code = "2" then credit_limit
            else 0 end) as Max_Limit_Inv, -- all active investment
          max (case
            when contract_phase = 'AC' 
              and usage_type_code = "2" then debit_bal
            else 0 end) as Max_OS_Inv, -- all active investment
          max (case
            when contract_phase = 'AC' 
              and usage_type_code = "2" then interest_rate
            else 0 end) as Max_int_rate_Inv, -- all active investment
          max(
            case
              when contract_phase = 'AC' 
              and usage_type_code = "2" and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC' 
              and usage_type_code = "2"
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as max_tenor_active_inv,
          min(
            case
              when contract_phase = 'AC' 
              and usage_type_code = "2" and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC' 
              and usage_type_code = "2"
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as min_tenor_active_inv,
          avg(
            case
              when contract_phase = 'AC' 
              and usage_type_code = "2" and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC' 
              and usage_type_code = "2"
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as avg_tenor_active_inv,


          
          sum (case
            when contract_phase = 'AC'
              and usage_type_code = "3" then 1
            else 0 end) as Count_loan_Cons, -- all active consumptive
          sum (case
            when contract_phase = 'AC' 
              and usage_type_code = "3" then credit_limit
            else 0 end) as Total_Limit_Cons, -- all active consumptive
          sum (case
            when contract_phase = 'AC' 
              and usage_type_code = "3" then debit_bal
            else 0 end) as Total_OS_Cons, -- all active consumptive
          max (case
            when contract_phase = 'AC' 
              and usage_type_code = "3" then credit_limit
            else 0 end) as Max_Limit_Cons, -- all active consumptive
          max (case
            when contract_phase = 'AC' 
              and usage_type_code = "3" then debit_bal
            else 0 end) as Max_OS_Cons, -- all active consumptive
          max (case
            when contract_phase = 'AC' 
              and usage_type_code = "3" then interest_rate
            else 0 end) as Max_int_rate_Cons, -- all active consumptive
          max(
            case
              when contract_phase = 'AC' 
              and usage_type_code = "3" and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC' 
              and usage_type_code = "3"
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as max_tenor_active_Cons,
          min(
            case
              when contract_phase = 'AC' 
              and usage_type_code = "3" and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC' 
              and usage_type_code = "3"
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as min_tenor_active_Cons,
          avg(
            case
              when contract_phase = 'AC' 
              and usage_type_code = "3" and
                TIMESTAMP_DIFF(date(due_date),date(start_date), month) is null
                then 0
              when contract_phase = 'AC' 
              and usage_type_code = "3"
                then TIMESTAMP_DIFF(date(due_date),date(start_date), month) end) as avg_tenor_active_Cons,




          max (case
            when contract_phase = 'AC' and
                contract_type_desc in ("Credit Card") then 1
            else 0 end) as Have_CC, -- Credit Card
            
          max (case
            when contract_phase = 'AC' and
                contract_type_desc in ("Credit Card") then credit_limit
            else 0 end) as Max_CC_limit, -- Credit Card
            
          max (case
            when contract_phase = 'AC' and
                contract_type_desc in ("Credit Card") then debit_bal
            else 0 end) as Max_CC_OS, -- Credit Card

          sum (case
            when contract_phase = 'AC' and
                contract_type_desc in ("Credit Card") then credit_limit
            else 0 end) as Sum_CC_limit, -- Credit Card
            
          sum (case
            when contract_phase = 'AC' and
                contract_type_desc in ("Credit Card") then debit_bal
            else 0 end) as Sum_CC_OS, -- Credit Card
          

  from raw_clik_data
  group by customer_id,
          count_num
),
fraud_gold_data as (
 SELECT cif_no,
       nik,
       brand,
       model,
       os_version
 FROM joey-bi-ss-risk-fraud-project.fraud.gold_dwh_onboarding
),
repay_data as (
  select a.arrangement_id,
          a.mis_date,
          sum(a.owed_amount) as sum_owed,
          b.limit_id
  from joey-bi-prod-project.staging.stg_collection__repayment_schedule a
  left join joey-bi-prod-project.staging.stg_collection__limit_loan b
        on a.arrangement_id = b.arrangement_id
        and String(b.mis_date) = date1
  where a.mis_date = last_day(a.mis_date)
  group by a.arrangement_id, a.mis_date, b.limit_id
),
repay_data_cust as (
  select limit_id,
        mis_date,
        sum(sum_owed) as os_client
  from repay_data
  group by limit_id, mis_date
),
dpd_data as (
  select substr(string(mis_date),1,7) as mis_mth,
          arrangement_id,
         max(dpd) max_dpd,
         sum(owed_amount) os_balance,
         case 
          when max(dpd) is null then 0
          when max(dpd) >=14 then sum(owed_amount)
          end as dpd_os_14,
         case 
          when max(dpd) is null then 0
          when max(dpd) >30 then sum(owed_amount)
          end as dpd_os_30
  from joey-bi-prod-project.staging.stg_collection__repayment_schedule 
  where mis_date= last_day(mis_date)
        and repay_status='REPAYING'
        -- and current_tenor = 1
  group by mis_date, arrangement_id
),
onboard_chn as (
  select t24_customer_id,
          date_of_birth,
          marital_status,
          company,
          industry,
          job_position,
          occupation
  from joey-bi-prod-project.edw.ft_onboarding_channel_latest 
  -- where string(mis_date) = date1
),
casa_profile_SK_date as (
      select a.t24_customer_id,
      a.mob_at,
      a.funded_customer,
      a.qris_customer,
      a.tabungmatic_customer,
      a.bill_customer,
      a.trfin_customer,
      a.trfout_customer,
      a.rwd_customer,
      a.buspo_customer,
      a.deporeg_customer,
      a.debit_customer,
      a.inflow_customer,
      a.outflow_customer,
      a.active_customer,
      a.active_trx_customer,
      a.active_trx_customer_excl_reward,
      a.active_trx_customer_payment_team,
      a.pocket_number,
      a.liab_balance,
      a.prev_liab_balance,
      a.pocket_balance,
      a.deposito_balance,
      a.depositoreg_balance,
      a.busposito_balance,
      a.sakubooster_balance,
      a.mainpocket_balance,
      a.spendingpocket_balance,
      a.savingpocket_balance,
      a.payroll_balance,
      a.trfr_out_amount,
      a.trfr_out_freq,
      a.trfr_in_amount,
      a.trfr_in_freq,
      a.outflow_amount,
      a.outflow_freq,
      a.inflow_amount,
      a.inflow_freq,
      a.tabungmatic_amount,
      a.tabungmatic_freq,
      a.reward_amount,
      a.reward_freq,
      a.refund_amount,
      a.refund_freq,
      a.intrabank_amount,
      a.intrabank_freq,
      a.qris_amount,
      a.qris_freq,
      a.bill_amount,
      a.bill_freq,
      a.debit_amount,
      a.debit_freq,
      a.ever_active_customer,
      a.ever_active_trx_customer,
      a.ever_active_trx_payment_team,
      a.ever_funded_customer_from_customer,
      a.ever_qris,
      a.ever_bill,
      a.ever_tabungmatic,
      a.ever_debit,
      a.ever_funded_customer_from_reward,
      a.ever_trfin_from_outsidebank,
      a.ever_trfout_to_outsidebank,
      a.ever_intrabank,
      a.ever_busposito,
      a.ever_deporegular,
      a.ever_trx_all_in_out,
      a.ever_funded_bal_above_zero,
      a.Active_trx_rate_P7D,
      a.Active_trx_rate_P14D,
      a.Active_trx_rate_P30D,
      a.Active_trx_rate_P31_60D,
      a.Active_trx_rate_P90D,
      a.Active_trx_rate_excl_P30D,
      a.active_trx_customer_payment_team_P7D,
      a.active_trx_customer_payment_team_P14D,
      a.active_trx_customer_payment_team_P30D,
      a.active_trx_customer_payment_team_P31_60D,
      a.Active_rate_P7D,
      a.Active_rate_P14D,
      a.Active_rate_P30D,
      a.Active_rate_P31_60D,
      a.Actv_qris_rate_P7D,
      a.Actv_qris_rate_P14D,
      a.Actv_qris_rate_P30D,
      a.Actv_qris_P31_60D,
      a.Actv_tabungmatic_rate_P7D,
      a.Actv_tabungmatic_rate_P14D,
      a.Actv_tabungmatic_rate_P30D,
      a.Actv_tabungmatic_P31_60D,
      a.Actv_trfin_rate_P7D,
      a.Actv_trfin_rate_P14D,
      a.Actv_trfin_rate_P30D,
      a.Actv_trfin_P31_60D,
      a.Actv_trfout_rate_P7D,
      a.Actv_trfout_rate_P14D,
      a.Actv_trfout_rate_P30D,
      a.Actv_trfout_P31_60D,
      a.Actv_bill_P7D,
      a.Actv_bill_P14D,
      a.Actv_bill_P30D,
      a.Actv_bill_P31_60D,
      a.Actv_reward_P7D,
      a.Actv_reward_P14D,
      a.Actv_reward_P30D,
      a.Actv_reward_P31_60D,
      a.Actv_buspo_P7D,
      a.Actv_buspo_P14D,
      a.Actv_buspo_P30D,
      a.Actv_buspo_P31_60D,
      a.Actv_deporeg_P7D,
      a.Actv_deporeg_P14D,
      a.Actv_deporeg_P30D,
      a.Actv_deporeg_P31_60D,
      a.Actv_debit_P7D,
      a.Actv_debit_P14D,
      a.Actv_debit_P30D,
      a.Actv_debit_P31_60D,
      a.login_P30D,
      a.login_P60D,
      a.login_P90D,
      a.login_above_90D,
      b.create_date,
      a.mis_date

      from joey-bi-prod-project.edw.ft_customer_portfolio_history a
      left join limit_base b on a.t24_customer_id = b.t24_customer_id
      where a.mis_date = last_day(a.mis_date)
            -- mis_date: 2025-05, create_date: 2025-06
            and cast(substr(string(a.mis_date),1,4) as int)*12 +  cast(substr(string(a.mis_date),6,2) as int)
            = cast(substr(b.create_date,1,4) as int)*12 +  cast(substr(b.create_date,6,2) as int) - 1
            and b.status in ('agreementSigned','approved')
),
combine as (
  select a.t24_customer_id,
         a.limit_id,
         a.deviation_level,
         a.limit_amount,
         a.request_ip_address,
         a.request_location,
         a.request_gps,
         (split(a.request_gps, ','))[safe_ordinal(1)] as req_gps_latitude,
         (split(a.request_gps, ','))[safe_ordinal(1)] as req_gps_longitude,
         a.device_id,
         a.status,
         a.apply_hr,
         a.create_date as apply_date,
        c.nik,
        c.brand,
        c.model,
        c.os_version,
         b.arrangement_id,
         b.disb_amt,
         b.tenor,
         b.product_code,
         b.disb_dt,
         b.disb_mth,
         b.disb_hr,

          d.flagging,
          e.province,
          e.email_domain,
          e.channel,
          e.gender,
          e.customer_range_age,
          e.phone_number,
          e.No_Provider,
          TIMESTAMP_DIFF(date(a.create_date),W.date_of_birth, year) AS age,
          W.date_of_birth,
          W.marital_status,
          W.company,
          W.industry,
          -- W.job_position,
          W.occupation,
          h.education_level,
          h.place_of_birth,
          -- h.marital_status,
          h.emergency_contact,
          h.emergency_contact_relationship,
          h.emergency_contact_number,
          i.residential_status,
          i.urban_village,
          i.postal_code,
          i.length_of_stay,
          i.residential_type,
          i.residential_address,
          i.district,
          i.residential_neighborhood,
          j.declared_income,
          j.office_address,
          j.office_phone,
          j.length_of_work,
          j.job_position,
          j.occupation_status,
          j.occupation_detail,
          j.source_of_funds,
          k.status as aai_status,
          k.score as aai_score,
          k.verify_type as aai_verify_type,
          k.vendor_type as aai_vendor_type,
          l.score as bps_score_raw,
          l.result as bsp_result,


          f.clik_bur_score,
          f.clik_risk_lvl,
          f.clik_bureau_info,
          f.izi_income_verification,
          f.aai_home_verification,
          f.aai_office_verification,
          f.bps_score,
          f.final_risk_level,
          g.os_client,
          t.dpd_os_14,
          t.dpd_os_30,
          V.mob_at,
          V.funded_customer,
          V.qris_customer,
          V.tabungmatic_customer,
          V.bill_customer,
          V.trfin_customer,
          V.trfout_customer,
          V.rwd_customer,
          V.buspo_customer,
          V.deporeg_customer,
          V.debit_customer,
          V.inflow_customer,
          V.outflow_customer,
          V.active_customer,
          V.active_trx_customer,
          V.active_trx_customer_excl_reward,
          V.active_trx_customer_payment_team,
          V.pocket_number,
          V.liab_balance,
          V.prev_liab_balance,
          V.pocket_balance,
          V.deposito_balance,
          V.depositoreg_balance,
          V.busposito_balance,
          V.sakubooster_balance,
          V.mainpocket_balance,
          V.spendingpocket_balance,
          V.savingpocket_balance,
          V.payroll_balance,
          V.trfr_out_amount,
          V.trfr_out_freq,
          V.trfr_in_amount,
          V.trfr_in_freq,
          V.outflow_amount,
          V.outflow_freq,
          V.inflow_amount,
          V.inflow_freq,
          V.tabungmatic_amount,
          V.tabungmatic_freq,
          V.reward_amount,
          V.reward_freq,
          V.refund_amount,
          V.refund_freq,
          V.intrabank_amount,
          V.intrabank_freq,
          V.qris_amount,
          V.qris_freq,
          V.bill_amount,
          V.bill_freq,
          V.debit_amount,
          V.debit_freq,
          V.ever_active_customer,
          V.ever_active_trx_customer,
          V.ever_active_trx_payment_team,
          V.ever_funded_customer_from_customer,
          V.ever_qris,
          V.ever_bill,
          V.ever_tabungmatic,
          V.ever_debit,
          V.ever_funded_customer_from_reward,
          V.ever_trfin_from_outsidebank,
          V.ever_trfout_to_outsidebank,
          V.ever_intrabank,
          V.ever_busposito,
          V.ever_deporegular,
          V.ever_trx_all_in_out,
          V.ever_funded_bal_above_zero,
          V.Active_trx_rate_P7D,
          V.Active_trx_rate_P14D,
          V.Active_trx_rate_P30D,
          V.Active_trx_rate_P31_60D,
          V.Active_trx_rate_P90D,
          V.Active_trx_rate_excl_P30D,
          V.active_trx_customer_payment_team_P7D,
          V.active_trx_customer_payment_team_P14D,
          V.active_trx_customer_payment_team_P30D,
          V.active_trx_customer_payment_team_P31_60D,
          V.Active_rate_P7D,
          V.Active_rate_P14D,
          V.Active_rate_P30D,
          V.Active_rate_P31_60D,
          V.Actv_qris_rate_P7D,
          V.Actv_qris_rate_P14D,
          V.Actv_qris_rate_P30D,
          V.Actv_qris_P31_60D,
          V.Actv_tabungmatic_rate_P7D,
          V.Actv_tabungmatic_rate_P14D,
          V.Actv_tabungmatic_rate_P30D,
          V.Actv_tabungmatic_P31_60D,
          V.Actv_trfin_rate_P7D,
          V.Actv_trfin_rate_P14D,
          V.Actv_trfin_rate_P30D,
          V.Actv_trfin_P31_60D,
          V.Actv_trfout_rate_P7D,
          V.Actv_trfout_rate_P14D,
          V.Actv_trfout_rate_P30D,
          V.Actv_trfout_P31_60D,
          V.Actv_bill_P7D,
          V.Actv_bill_P14D,
          V.Actv_bill_P30D,
          V.Actv_bill_P31_60D,
          V.Actv_reward_P7D,
          V.Actv_reward_P14D,
          V.Actv_reward_P30D,
          V.Actv_reward_P31_60D,
          V.Actv_buspo_P7D,
          V.Actv_buspo_P14D,
          V.Actv_buspo_P30D,
          V.Actv_buspo_P31_60D,
          V.Actv_deporeg_P7D,
          V.Actv_deporeg_P14D,
          V.Actv_deporeg_P30D,
          V.Actv_deporeg_P31_60D,
          V.Actv_debit_P7D,
          V.Actv_debit_P14D,
          V.Actv_debit_P30D,
          V.Actv_debit_P31_60D,
          V.login_P30D,
          V.login_P60D,
          V.login_P90D,
          V.login_above_90D

  from limit_base a
  left join disb_base b on cast(a.limit_id as STRING) = b.limit_id
  left join fraud_gold_data c on a.t24_customer_id = c.cif_no
  left join joey-bi-prod-project.sandbox_da.v_prefiltering_funded_flag d on a.t24_customer_id = cast(d.t24_customer_id as string) 
  left join onboarding_req e on a.t24_customer_id = cast(e.t24_customer_id as string) 
  left join cred_summary f on a.limit_id = f.application_id 
  left join repay_data_cust g on a.limit_id = g.limit_id
        and last_day(cast(b.disb_dt as date)) = g.mis_date

  left join sake_cust_info h on c.nik = h.nik
  left join sake_resident_info i on cast(a.limit_customer_info_id as string) = i.limit_customer_info_id
  left join sake_work_info j on a.limit_customer_info_id = j.limit_customer_info_id
  left join aai_record k on e.phone_number = k.phone_number
  left join bps_record l on a.limit_id = l.id
  left join raw_clik_data m on a.customer_info_id = m.customer_id

  -- left join dpd_data s on a.arrangement_id = s.arrangement_id
                        -- disb: 2025-01, dpd: 2025-02
                    -- and (cast(substr(a.disb_mth,1,4) as int)*12 + cast(substr(a.disb_mth,6,2) as int))
                    --   = (cast(substr(s.mis_mth,1,4) as int)*12 + cast(substr(s.mis_mth,6,2) as int) -1)
  left join dpd_data t on b.arrangement_id = t.arrangement_id
                        -- disb: 2025-01, dpd: 2025-03
                    and (cast(substr(b.disb_mth,1,4) as int)*12 + cast(substr(b.disb_mth,6,2) as int))
                      = (cast(substr(t.mis_mth,1,4) as int)*12 + cast(substr(t.mis_mth,6,2) as int) -2)
  left join casa_profile_SK_date V on a.t24_customer_id = V.t24_customer_id
  left join onboard_chn W on a.t24_customer_id = W.t24_customer_id
  
),
comb_band as (
  select *,
        case
          when apply_hr between 0 and 4 then '1. Midnight-Dawn: 0-4'
          when apply_hr between 5 and 8 then '1. Morning: 5-8'
          when apply_hr between 9 and 10 then '2. Brunch Time: 9-10'
          when apply_hr between 11 and 12 then '3. Lunch Time: 11-12'
          when apply_hr between 13 and 16 then '4. Afternoon: 13-16'
          when apply_hr between 17 and 23 then '5. Night: 17-23'
          else '9. Else' end as apps_apply_hr_grp,
      case
         when request_ip_address like '%.%' then '1. IPv4'
         when request_ip_address like '%:%' then '2. IPv6'
         else '9. Else' end as device_IP_add_type,
      case
         when request_ip_address like '%.%' then 
                  (split(request_ip_address, '.'))[safe_ordinal(1)] 
         when request_ip_address like '%:%' then 
                  (split(request_ip_address, ':'))[safe_ordinal(1)] 
         else '9. Else' end as device_IP_first_layer,
      case
         when request_ip_address like '%.%' then 
                  (split(request_ip_address, '.'))[safe_ordinal(2)] 
         when request_ip_address like '%:%' then 
                  (split(request_ip_address, ':'))[safe_ordinal(2)] 
         else '9. Else' end as device_IP_second_layer,
      case
         when request_ip_address like '%.%' then 
                  (split(request_ip_address, '.'))[safe_ordinal(3)] 
         when request_ip_address like '%:%' then 
                  (split(request_ip_address, ':'))[safe_ordinal(3)] 
         else '9. Else' end as device_IP_third_layer,
      case
         when request_ip_address like '%.%' then 
                  (split(request_ip_address, '.'))[safe_ordinal(4)] 
         when request_ip_address like '%:%' then 
                  (split(request_ip_address, ':'))[safe_ordinal(4)] 
         else '9. Else' end as device_IP_fourth_layer,
      case
         when request_ip_address like '%.%' then 
                  ARRAY_REVERSE(SPLIT(request_ip_address,"."))[SAFE_OFFSET(0)]
         when request_ip_address like '%:%' then 
                  ARRAY_REVERSE(SPLIT(request_ip_address,":"))[SAFE_OFFSET(0)]
         else '9. Else' end as device_IP_last_layer,
      case
         when request_ip_address like '%.%' then 
                  ARRAY_REVERSE(SPLIT(request_ip_address,"."))[SAFE_OFFSET(1)]
         when request_ip_address like '%:%' then 
                  ARRAY_REVERSE(SPLIT(request_ip_address,":"))[SAFE_OFFSET(1)]
         else '9. Else' end as device_IP_last_2_layer,
      case
         when request_ip_address like '%.%' then 
                  ARRAY_REVERSE(SPLIT(request_ip_address,"."))[SAFE_OFFSET(2)]
         when request_ip_address like '%:%' then 
                  ARRAY_REVERSE(SPLIT(request_ip_address,":"))[SAFE_OFFSET(2)]
         else '9. Else' end as device_IP_last_3_layer,
      case
         when request_ip_address like '%.%' then 
                  ARRAY_REVERSE(SPLIT(request_ip_address,"."))[SAFE_OFFSET(3)]
         when request_ip_address like '%:%' then 
                  ARRAY_REVERSE(SPLIT(request_ip_address,":"))[SAFE_OFFSET(3)]
         else '9. Else' end as device_IP_last_4_layer,
      length(request_ip_address) as device_IP_add_length,

      request_location as device_req_location,

      -- big cities: 
      -- Jakarta 6.1944° S, 106.8229° E
      -- Surabaya 7.2575° S, 112.7521° E
      -- Bekasi 6.2383° S, 106.9756° E
      -- Bandung 6.9175° S, 107.6191° E
      -- Tangerang 6.1756° S, 106.6299° E
      -- Semarang 6.9838° S, 110.4100° E


      -- 5 KM Radius
      case -- JKT
         when cast(req_gps_latitude as decimal) between  (-6.1944 + (5/111 /2)) AND (-6.1944 - (5/111 /2))
            and cast(req_gps_longitude as decimal) between (106.8229 + (5/111 *cos(6.17) /2)) AND (106.8229 - (5/111 *cos(6.17) /2))
            then '1. Within 5Km Big City'
           -- SBY
         when cast(req_gps_latitude as decimal) between  (-7.2575 + (5/111 /2)) AND (-7.2575 - (5/111 /2))
            and cast(req_gps_longitude as decimal) between (112.7521 + (5/111 *cos(6.17) /2)) AND (112.7521 - (5/111 *cos(6.17) /2))
            then '1. Within 5Km Big City'
           -- BKS
         when cast(req_gps_latitude as decimal) between  (-6.2383 + (5/111 /2)) AND (-6.2383 - (5/111 /2))
            and cast(req_gps_longitude as decimal) between (106.9756 + (5/111 *cos(6.17) /2)) AND (106.9756 - (5/111 *cos(6.17) /2))
            then '1. Within 5Km Big City'
           -- BDG
         when cast(req_gps_latitude as decimal) between  (-6.9175 + (5/111 /2)) AND (-6.9175 - (5/111 /2))
            and cast(req_gps_longitude as decimal) between (107.6191 + (5/111 *cos(6.17) /2)) AND (107.6191 - (5/111 *cos(6.17) /2))
            then '1. Within 5Km Big City'
           -- TGR
         when cast(req_gps_latitude as decimal) between  (-6.1756 + (5/111 /2)) AND (-6.1756 - (5/111 /2))
            and cast(req_gps_longitude as decimal) between (106.6299 + (5/111 *cos(6.17) /2)) AND (106.6299 - (5/111 *cos(6.17) /2))
            then '1. Within 5Km Big City'
           -- SMG
         when cast(req_gps_latitude as decimal) between  (-6.9838 + (5/111 /2)) AND (-6.9838 - (5/111 /2))
            and cast(req_gps_longitude as decimal) between (110.4100 + (5/111 *cos(6.17) /2)) AND (110.4100 - (5/111 *cos(6.17) /2))
            then '1. Within 5Km Big City'
      -- 10 KM Radius
           -- JKT
         when cast(req_gps_latitude as decimal) between  (-6.1944 + (10/111 /2)) AND (-6.1944 - (10/111 /2))
            and cast(req_gps_longitude as decimal) between (106.8229 + (10/111 *cos(6.17) /2)) AND (106.8229 - (10/111 *cos(6.17) /2))
            then '2. Within 10Km Big City'
           -- SBY
         when cast(req_gps_latitude as decimal) between  (-7.2575 + (10/111 /2)) AND (-7.2575 - (10/111 /2))
            and cast(req_gps_longitude as decimal) between (112.7521 + (10/111 *cos(6.17) /2)) AND (112.7521 - (10/111 *cos(6.17) /2))
            then '2. Within 10Km Big City'
           -- BKS
         when cast(req_gps_latitude as decimal) between  (-6.2383 + (10/111 /2)) AND (-6.2383 - (10/111 /2))
            and cast(req_gps_longitude as decimal) between (106.9756 + (10/111 *cos(6.17) /2)) AND (106.9756 - (10/111 *cos(6.17) /2))
            then '2. Within 10Km Big City'
           -- BDG
         when cast(req_gps_latitude as decimal) between  (-6.9175 + (10/111 /2)) AND (-6.9175 - (10/111 /2))
            and cast(req_gps_longitude as decimal) between (107.6191 + (10/111 *cos(6.17) /2)) AND (107.6191 - (10/111 *cos(6.17) /2))
            then '2. Within 10Km Big City'
           -- TGR
         when cast(req_gps_latitude as decimal) between  (-6.1756 + (10/111 /2)) AND (-6.1756 - (10/111 /2))
            and cast(req_gps_longitude as decimal) between (106.6299 + (10/111 *cos(6.17) /2)) AND (106.6299 - (10/111 *cos(6.17) /2))
            then '2. Within 10Km Big City'
           -- SMG
         when cast(req_gps_latitude as decimal) between  (-6.9838 + (10/111 /2)) AND (-6.9838 - (10/111 /2))
            and cast(req_gps_longitude as decimal) between (110.4100 + (10/111 *cos(6.17) /2)) AND (110.4100 - (10/111 *cos(6.17) /2))
            then '2. Within 10Km Big City'
      -- 15 KM Radius
           -- JKT
         when cast(req_gps_latitude as decimal) between  (-6.1944 + (15/111 /2)) AND (-6.1944 - (15/111 /2))
            and cast(req_gps_longitude as decimal) between (106.8229 + (15/111 *cos(6.17) /2)) AND (106.8229 - (15/111 *cos(6.17) /2))
            then '3. Within 15Km Big City'
           -- SBY
         when cast(req_gps_latitude as decimal) between  (-7.2575 + (15/111 /2)) AND (-7.2575 - (15/111 /2))
            and cast(req_gps_longitude as decimal) between (112.7521 + (15/111 *cos(6.17) /2)) AND (112.7521 - (15/111 *cos(6.17) /2))
            then '3. Within 15Km Big City'
           -- BKS
         when cast(req_gps_latitude as decimal) between  (-6.2383 + (15/111 /2)) AND (-6.2383 - (15/111 /2))
            and cast(req_gps_longitude as decimal) between (106.9756 + (15/111 *cos(6.17) /2)) AND (106.9756 - (15/111 *cos(6.17) /2))
            then '3. Within 15Km Big City'
           -- BDG
         when cast(req_gps_latitude as decimal) between  (-6.9175 + (15/111 /2)) AND (-6.9175 - (15/111 /2))
            and cast(req_gps_longitude as decimal) between (107.6191 + (15/111 *cos(6.17) /2)) AND (107.6191 - (15/111 *cos(6.17) /2))
            then '3. Within 15Km Big City'
           -- TGR
         when cast(req_gps_latitude as decimal) between  (-6.1756 + (15/111 /2)) AND (-6.1756 - (15/111 /2))
            and cast(req_gps_longitude as decimal) between (106.6299 + (15/111 *cos(6.17) /2)) AND (106.6299 - (15/111 *cos(6.17) /2))
            then '3. Within 15Km Big City'
           -- SMG
         when cast(req_gps_latitude as decimal) between  (-6.9838 + (15/111 /2)) AND (-6.9838 - (15/111 /2))
            and cast(req_gps_longitude as decimal) between (110.4100 + (15/111 *cos(6.17) /2)) AND (110.4100 - (15/111 *cos(6.17) /2))
            then '3. Within 15Km Big City'
      -- 20 KM Radius
           -- JKT
         when cast(req_gps_latitude as decimal) between  (-6.1944 + (20/111 /2)) AND (-6.1944 - (20/111 /2))
            and cast(req_gps_longitude as decimal) between (106.8229 + (20/111 *cos(6.17) /2)) AND (106.8229 - (20/111 *cos(6.17) /2))
            then '4. Within 20Km Big City'
           -- SBY
         when cast(req_gps_latitude as decimal) between  (-7.2575 + (20/111 /2)) AND (-7.2575 - (20/111 /2))
            and cast(req_gps_longitude as decimal) between (112.7521 + (20/111 *cos(6.17) /2)) AND (112.7521 - (20/111 *cos(6.17) /2))
            then '4. Within 20Km Big City'
           -- BKS
         when cast(req_gps_latitude as decimal) between  (-6.2383 + (20/111 /2)) AND (-6.2383 - (20/111 /2))
            and cast(req_gps_longitude as decimal) between (106.9756 + (20/111 *cos(6.17) /2)) AND (106.9756 - (20/111 *cos(6.17) /2))
            then '4. Within 20Km Big City'
           -- BDG
         when cast(req_gps_latitude as decimal) between  (-6.9175 + (20/111 /2)) AND (-6.9175 - (20/111 /2))
            and cast(req_gps_longitude as decimal) between (107.6191 + (20/111 *cos(6.17) /2)) AND (107.6191 - (20/111 *cos(6.17) /2))
            then '4. Within 20Km Big City'
           -- TGR
         when cast(req_gps_latitude as decimal) between  (-6.1756 + (20/111 /2)) AND (-6.1756 - (20/111 /2))
            and cast(req_gps_longitude as decimal) between (106.6299 + (20/111 *cos(6.17) /2)) AND (106.6299 - (20/111 *cos(6.17) /2))
            then '4. Within 20Km Big City'
           -- SMG
         when cast(req_gps_latitude as decimal) between  (-6.9838 + (20/111 /2)) AND (-6.9838 - (20/111 /2))
            and cast(req_gps_longitude as decimal) between (110.4100 + (20/111 *cos(6.17) /2)) AND (110.4100 - (20/111 *cos(6.17) /2))
            then '4. Within 20Km Big City'

      -- 25 KM Radius
          -- JKT
         when cast(req_gps_latitude as decimal) between  (-6.1944 + (25/111 /2)) AND (-6.1944 - (25/111 /2))
            and cast(req_gps_longitude as decimal) between (106.8229 + (25/111 *cos(6.17) /2)) AND (106.8229 - (25/111 *cos(6.17) /2))
            then '5. Within 25Km Big City'
           -- SBY
         when cast(req_gps_latitude as decimal) between  (-7.2575 + (25/111 /2)) AND (-7.2575 - (25/111 /2))
            and cast(req_gps_longitude as decimal) between (112.7521 + (25/111 *cos(6.17) /2)) AND (112.7521 - (25/111 *cos(6.17) /2))
            then '5. Within 25Km Big City'
           -- BKS
         when cast(req_gps_latitude as decimal) between  (-6.2383 + (25/111 /2)) AND (-6.2383 - (25/111 /2))
            and cast(req_gps_longitude as decimal) between (106.9756 + (25/111 *cos(6.17) /2)) AND (106.9756 - (25/111 *cos(6.17) /2))
            then '5. Within 25Km Big City'
           -- BDG
         when cast(req_gps_latitude as decimal) between  (-6.9175 + (25/111 /2)) AND (-6.9175 - (25/111 /2))
            and cast(req_gps_longitude as decimal) between (107.6191 + (25/111 *cos(6.17) /2)) AND (107.6191 - (25/111 *cos(6.17) /2))
            then '5. Within 25Km Big City'
           -- TGR
         when cast(req_gps_latitude as decimal) between  (-6.1756 + (25/111 /2)) AND (-6.1756 - (25/111 /2))
            and cast(req_gps_longitude as decimal) between (106.6299 + (25/111 *cos(6.17) /2)) AND (106.6299 - (25/111 *cos(6.17) /2))
            then '5. Within 25Km Big City'
           -- SMG
         when cast(req_gps_latitude as decimal) between  (-6.9838 + (25/111 /2)) AND (-6.9838 - (25/111 /2))
            and cast(req_gps_longitude as decimal) between (110.4100 + (25/111 *cos(6.17) /2)) AND (110.4100 - (25/111 *cos(6.17) /2))
            then '5. Within 25Km Big City'
         else '9. Outside 25Km Radius Big City' end as device_gps_big_city,
      case
         when device_id like '%-%' then '1. Device id type 1 --'
         else '2. Device id type 2' end as device_id_type,
      length(device_id) as device_id_length,
      
      case
         when brand is null then 'Null Information'
         when brand in ('OPPO','samsung','vivo','Apple','Redmi','Infinix','realme','xiaomi','POCO')
            then brand 
         else 'Others' end as device_phone_brand,
      model as device_model_brand,
      os_version as device_os_version,
      substr(os_version,1,2) as device_os_version_l2,
      -- Demog
      case
          when province in ('BANTEN','DKI JAKARTA','JAWA BARAT',
                          'JAWA TENGAH','JAWA TIMUR') then province
          when province in ('ACEH','BENGKULU', 'JAMBI', 'KEP. BANGKA BELITUNG', 
                          'LAMPUNG','RIAU', 'KEPULAUAN RIAU') then 'SUMATERA'
          when province like '%SUMATERA%' then 'SUMATERA'
          when province in ('BALI') then 'BALI'
          when province in ('DAERAH ISTIMEWA YOGYAKARTA') then 'JAWA TENGAH'
          when province like '%KALIMANTAN%' then 'KALIMANTAN'
          when province in ('MALUKU','NUSA TENGGARA BARAT','PAPUA', 
                        'NUSA TENGGARA TIMUR', 'MALUKU UTARA', 'GORONTALO') then 'Indonesia Bagian Timur'
          when province like '%SULAWESI%' then 'Indonesia Bagian Timur'
          else '99. Others' end as demog_prov_grp,
        
        length(phone_number) as device_phone_length,
        
        case
          when age < 22 then '1. Age below 22'
          when age < 23 then '2. Age is 22'
          when age < 38 then '3. Age is 23-38'
          when age >= 38 then '4. Age >= 38'
          else '9. Else' end as demog_age_grp,

        case
          when upper(company) like '%BANK%' then '01. Company: Bank'
          when upper(company) like '%ALFA%' then '02. Company: Alfamart-midi'
          when upper(company) like '%ASTRA%' then '03. Company: Astra'
          when upper(company) like '%APOTEK%' then '04. Company: Apotek'
          when upper(company) like '%BENGKEL%' then '05. Company: Bengkel'
          when upper(company) like '%HOTEL%' then '06. Company: Hotel'
          when upper(company) like '%GOJEK%' then '07. Company: Gojek, Grab, Maxim'
          when upper(company) like '%GRAB%' then '07. Company: Gojek, Grab, Maxim'
          when upper(company) like '%MAXIM%' then '07. Company: Gojek, Grab, Maxim'
          when upper(company) like '%KEBUN%' then '08. Company: Perkebunan, Pertanian'
          when upper(company) like '%TANI%' then '08. Company: Perkebunan, Pertanian'
          when upper(company) like '%TOKO %' then '09. Company: Toko, Warung'
          when upper(company) like '%WARUNG %' then '09. Company: Toko, Warung'
          when upper(company) like '%PT%' then '10. Company: PT.'
          when upper(company) like '%CV%' then '10. Company: CV.'
          else '99. Others Company' end as demog_company_grp,

        case
          when industry in ('Pemerintahan (BUMN, BUMD, & Kehakiman)', 'Edukasi') then '01. Goverment, Education'
          when industry in ('Pertambangan & Penggalian, Gas & Minyak Bumi/Energi & Logam',
        'Perbankan') then '02. Mining, Bank'
          when industry in ('Jasa Keuangan (Bukan Bank)','E-commerce') then '03. E-commerce & Financial Service non Bank'
          when industry in ('Retail dan Grosir - Minimarket, SPBU') then '04. Retail'
          when industry in ('Organisasi Non-Profit, Amal dan Sosial',
        'Profesional (Konsultan & Pelayanan Hukum)') then '05. NGO, Proffesional services'
          when industry in ('Kesehatan',  'Kecantikan & Kebugaran') then '06. Health & Beauty'
          when industry in ('Komputer, Teknologi Informasi, Media Massa, & Telekomunikasi') then '07. Telco Services'
          when industry in ('Supplier/Distributor (Ekspor & Impor)',
        'Pemasaran, Media, & Komunikasi') then '08. Supplier, Marketing, Media'
          when industry in ('Manufaktur, Industri, & Pengolahan') then '09. Manufacture'
          when industry in ('Perhotelan, Agen Perjalanan, Hiburan & Rekreasi',
        'Real Estat & Developer/Showroom') then '10. Hotel, Travel, & Developer'
          when industry in ('Barang Antik/Perdagangan Seni, Emas',
        'Transportasi, Logistik dan Storage',
        'Penyedia Utilitas (Air, Listrik, dan Manajemen Limbah)') then '11. Utility, Transport, Developer'
          when industry in ('Konstruksi', 'Pertanian, Kehutanan, Perikanan, & Peternakan') then '12. Construction, Agriculture, Forestry, Fishery, & Farm'
          when industry in ('Lainnya') then '13. Others'
          else '99. Else' end as Demog_Industry_grp,
        case
          when occupation in ('Karyawan Swasta') then '1. Karyawan Swasta'
          when occupation in ('Wiraswasta/Pemegang Saham/Pengusaha') then '2. Enterpreneur'
          when occupation in ('Profesional',
        'Karyawan Jasa Keuangan (Non-Bank)/Perdagangan Valuta Asing',
        'Buruh/Pekerja Non-Formal', 'Pensiunan - PNS') then '3. Profesional, Non-formal occupation'
          when occupation in ('Karyawan Bank Jasa Jakarta', 'Lainnya',
        'Pegawai OJK, BI, BUMN, BUMD', 'Pegawai Yayasan', 'Karyawan Bank') then '4. Other Type of Employee'
        else '9. Else' end as Demog_occu_grp,
        case
          when email_domain in ('gmail.com') then '1. Gmail'
          when email_domain in ('yahoo.com','ymail.com','yahoo.co.id') then '2. Yahoo'
          when email_domain in ('icloud.com') then '3. Apple-icloud'
          when email_domain in ('outlook.com','hotmail.com','windowslive.com') then '4. outlook/hotmail/windows'
          else '9. Others' end as Device_email_domain_grp,
        case
          when clik_bur_score is null then '00. Null'
          when clik_bur_score  =   0 then '00. 0'
          when clik_bur_score <= 149 then '00. 1 - 149'
          when clik_bur_score <= 267 then '01. 150 - 267'
          when clik_bur_score <= 379 then '02. 268 - 379'
          when clik_bur_score <= 519 then '03. 380 - 519'
          when clik_bur_score <= 545 then '04. 520 - 545'
          when clik_bur_score <= 561 then '05. 546 - 561'
          when clik_bur_score  > 561 then '06. above 561' --up to 659 based on docs....
          else '99. else' end as clik_bur_score_grp_2,
        case
          when bps_score is null then '00. null'          
          when bps_score  =    0 then '00. 0'
          when bps_score <=  499 then '01. 370 - 499'
          when bps_score <=  530 then '02. 500 - 530'
          when bps_score <=  559 then '03. 531 - 559'
          when bps_score <=  593 then '04. 560 - 593'
          when bps_score <=  627 then '05. 594 - 627'
          when bps_score <=  806 then '06. 628 - 806'
          when bps_score >   806 then '07. above 806'
          else '99. Else' end as bps_score_grp_2,
        case
          when dpd_os_14 > 0 then 1
          else 0 end as dpd_os_14_acct,
        case
          when dpd_os_30 > 0 then 1
          else 0 end as dpd_os_30_acct
  from combine
),
result as (
select *
from comb_band
where t24_customer_id not in ('101174407','101858872','102072000','102084939','102072802',
'102096422','102297855','102881367','102885122','102885563','102885579','102887979','102888890',
'102889498','102889884','102889944','102890407','102560171','102668133') -- fraud
),
binning as (
select       occupation,
      t24_customer_id,
      sum(disb_amt) as total_disb,
      case
        when max(case when dpd_os_14 is null then 0
              else dpd_os_14 end) > 0 then 1 
              end as bad_flag_14,
      case
        when max(case when dpd_os_30 is null then 0
              else dpd_os_30 end) > 0 then 1 
              end as bad_flag_30

from comb_band
where status in ('agreementSigned','approved')
group by occupation, t24_customer_id
)
select *
from result
;
